import React, { useState, useEffect, useMemo } from 'react';
import { 
  Users, Calendar, ArrowLeft, FileText, 
  MessageSquare, Target, BarChart, Link as LinkIcon,
  UserPlus, Briefcase, Award, Handshake,
  Clock, DollarSign, AlertCircle, Lightbulb,
  Tag, Zap, ThumbsUp, ThumbsDown, Plus, Check, 
  Calendar as CalendarIcon, Flag, Edit3, Trash2, PlusCircle,
  TrendingUp, Shield, Rocket, MapPin, Building, Globe,
  Heart, Star, Share2, BookOpen, Layers, Settings,
  ChevronRight, Eye, Download, Upload
} from 'lucide-react';
import type { Collaboration, CollaborationRequest, InterestSubmission } from '../types';
import { ExpressInterestModal } from './ExpressInterestModal';
import ProtectedAction from './auth/ProtectedAction';
import { saveVote, updateCollaborationProgress } from '../services/collaborations';
import { useNavigate, Link } from 'react-router-dom';
import { getUserById } from '../services/users';
import { sendMessage } from '../services/messages';
import { useAuth } from '../contexts/AuthContext';
import CollaborationFiles from './CollaborationFiles';
import { CommentSection } from './CommentSection';
import { submitInterest } from '../services/api';

type CollaboratorType = 'startup' | 'research' | 'corporate' | 'government' | 'investor' | 'individual' | 'accelerator' | 'incubator';

interface CollaborationDetailsProps {
  collaboration: Collaboration;
  onBack: () => void;
  cameFromSearch?: boolean;
}

function ComingSoonOverlay({ children, title }: { children: React.ReactNode, title?: string }) {
  const [isTransparent, setIsTransparent] = useState(false);

  const toggleTransparency = () => {
    setIsTransparent(!isTransparent);
  };

  return (
    <div className="relative">
      {children}
      <div 
        onClick={toggleTransparency}
        className={`absolute inset-0 ${isTransparent ? 'bg-gray-100 bg-opacity-30' : 'bg-gray-100 bg-opacity-99'} 
          backdrop-blur-sm flex flex-col items-center justify-center transition-all duration-300 cursor-pointer`}
      >
        <AlertCircle className={`h-8 w-8 text-indigo-500 mb-2 ${isTransparent ? 'opacity-50' : 'opacity-100'}`} />
        <p className={`text-lg font-medium text-gray-800 ${isTransparent ? 'opacity-50' : 'opacity-100'}`}>
          {title || 'Coming Soon'}
        </p>
        <p className={`text-sm text-gray-600 mt-1 ${isTransparent ? 'opacity-50' : 'opacity-100'}`}>
          This feature will be available in Q2 2025
        </p>
        <p className="text-xs text-indigo-600 mt-3 font-medium">
          {isTransparent ? 'Click to hide details' : 'Click to preview'}
        </p>
      </div>
    </div>
  );
}

function CollaborationRequestCard({ request, onExpressInterest }: { 
  request: CollaborationRequest;
  onExpressInterest: (request: CollaborationRequest) => void;
}) {
  return (
    <div className="bg-white rounded-lg shadow p-4 border border-gray-200">
      <div className="flex items-center justify-between mb-2">
        <h4 className="font-semibold text-gray-900">{request.role}</h4>
        <span className={`px-2 py-0.5 text-xs rounded-full ${
          request.status === 'open' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {request.status}
        </span>
      </div>
      <p className="text-sm text-gray-600 mb-3">{request.description}</p>
      <div className="flex flex-wrap gap-1 mb-3">
        {request.expertise.map((skill, index) => (
          <span key={index} className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">
            {skill}
          </span>
        ))}
      </div>
      <ProtectedAction
        onAction={() => onExpressInterest(request)}
        buttonClassName="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center"
        actionName="express interest in this position"
      >
        <UserPlus className="h-4 w-4 mr-2" />
        Express Interest
      </ProtectedAction>
    </div>
  );
}

export function CollaborationDetails({ collaboration, onBack, cameFromSearch = false }: CollaborationDetailsProps) {
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();
  const openRequests = collaboration.collaborationRequests?.filter(r => r.status === 'open') || [];
  const [selectedRequest, setSelectedRequest] = useState<CollaborationRequest | null>(null);
  const [collaboratorType, setCollaboratorType] = useState<CollaboratorType>('individual');
  const [showInitiativeModal, setShowInitiativeModal] = useState(false);
  const [votes, setVotes] = useState({ 
    upvotes: collaboration.upvotes || 0, 
    downvotes: collaboration.downvotes || 0 
  });
  const [userVote, setUserVote] = useState<'up' | 'down' | null>(null);
  const [isVoting, setIsVoting] = useState(false);
  const [voteError, setVoteError] = useState<string | null>(null);
  const [creator, setCreator] = useState<{ name: string; role?: string } | null>(null);
  const [isLoadingCreator, setIsLoadingCreator] = useState(false);
  
  // Check if current user is owner or participant
  const isOwnerOrParticipant = useMemo(() => {
    if (!isAuthenticated || !user) return false;
    
    // Check if user is the owner
    if (collaboration.createdById === user.id) return true;
    
    // Check if user is in participants (participants can be string[] or User[] depending on API)
    if (collaboration.participants && collaboration.participants.length > 0) {
      // If participants are string IDs
      if (typeof collaboration.participants[0] === 'string') {
        if (collaboration.participants.includes(user.id)) return true;
      } 
      // If participants are objects with ids
      else if (typeof collaboration.participants[0] === 'object') {
        // @ts-ignore - Handle potential type mismatch in API response
        if (collaboration.participants.some(p => p && p.id === user.id)) return true;
      }
    }
    
    // Check if user is in team members
    if (collaboration.teamMembers && collaboration.teamMembers.includes(user.id)) return true;
    
    // For testing/development purposes, temporarily allow all users to upload
    // Remove this in production
    // return true;
    
    return false;
  }, [isAuthenticated, user, collaboration]);
  
  // Progress tracking state
  const [progressValue, setProgressValue] = useState(60);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [isEditingProgress, setIsEditingProgress] = useState(false);
  const [isSavingProgress, setIsSavingProgress] = useState(false);
  const [isAddingMilestone, setIsAddingMilestone] = useState(false);
  const [isSavingMilestone, setIsSavingMilestone] = useState(false);
  const [activeMilestoneId, setActiveMilestoneId] = useState<string | null>(null);
  const [progressError, setProgressError] = useState<string | null>(null);
  const [milestones, setMilestones] = useState<{id: string; name: string; dueDate: string; completed: boolean}[]>([
    { id: '1', name: 'Project kickoff', dueDate: '2024-06-15', completed: true },
    { id: '2', name: 'First prototype', dueDate: '2024-07-20', completed: false },
    { id: '3', name: 'User testing', dueDate: '2024-08-15', completed: false },
    { id: '4', name: 'Final delivery', dueDate: '2024-09-30', completed: false }
  ]);
  const [newMilestone, setNewMilestone] = useState({ name: '', dueDate: '' });

  // Update votes when collaboration prop changes
  useEffect(() => {
    setVotes({
      upvotes: collaboration.upvotes || 0,
      downvotes: collaboration.downvotes || 0
    });
  }, [collaboration.upvotes, collaboration.downvotes]);

  // Calculate the duration based on start and end dates
  useEffect(() => {
    // Default start date to today if not set
    const start = startDate ? new Date(startDate) : new Date();
    // Default end date to 6 months from now if not set
    const end = endDate ? new Date(endDate) : new Date(start.getTime() + 6 * 30 * 24 * 60 * 60 * 1000);
    
    setStartDate(start.toISOString().split('T')[0]);
    setEndDate(end.toISOString().split('T')[0]);
  }, []);

  // Add useEffect to fetch creator details
  useEffect(() => {
    const fetchCreatorDetails = async () => {
      if (collaboration.createdById) {
        setIsLoadingCreator(true);
        try {
          const userData = await getUserById(collaboration.createdById);
          if (userData) {
            setCreator({
              name: `${userData.firstName} ${userData.lastName}`,
              role: userData.role
            });
          }
        } catch (error) {
          console.error('Error fetching creator details:', error);
        } finally {
          setIsLoadingCreator(false);
        }
      }
    };

    fetchCreatorDetails();
  }, [collaboration.createdById]);

  // Calculate percentage of completed milestones
  const completedMilestones = milestones.filter(milestone => milestone.completed).length;
  const milestonesProgress = milestones.length > 0 
    ? Math.round((completedMilestones / milestones.length) * 100) 
    : 0;

  const handleExpressInterest = (request: CollaborationRequest) => {
    setSelectedRequest(request);
  };

  const handleSubmitInterest = async (submission: InterestSubmission) => {
    try {
      // Check if user is authenticated
      if (!isAuthenticated || !user) {
        alert('You must be logged in to express interest. Please sign in and try again.');
        return;
      }
      
      // Format additional info based on submission type
      let additionalInfo = '';
      
      if (submission.expertiseText || (submission.expertise && submission.expertise.length > 0)) {
        additionalInfo += `• Expertise: ${submission.expertiseText || submission.expertise.join(', ')}\n`;
      }
      
      if (submission.foundingYear) {
        additionalInfo += `• Founding Year: ${submission.foundingYear}\n`;
      }
      
      if (submission.researchArea) {
        additionalInfo += `• Research Area: ${submission.researchArea}\n`;
      }
      
      if (submission.investmentFocus) {
        additionalInfo += `• Investment Focus: ${submission.investmentFocus}\n`;
      }
      
      // Send interest data to API
      if (collaboration.createdById && user.id !== collaboration.createdById) {
        await submitInterest({
          entityId: collaboration.id,
          entityType: collaboration.type || 'collaboration',
          entityTitle: collaboration.title,
          ownerId: collaboration.createdById,
          message: submission.message,
          additionalInfo
        });
        
        // Show success message
        alert('Your interest has been submitted successfully! The collaboration team will review your application and contact you soon.');
      } else {
        console.error('Cannot express interest: Missing owner ID or you are the owner');
        alert('Cannot submit interest. Missing owner information or you are the owner of this collaboration.');
      }
    } catch (error) {
      console.error('Error submitting interest:', error);
      alert('There was an error submitting your interest. Please try again later.');
    }
  };

  const handleVote = async (voteType: 'up' | 'down') => {
    // Clear any previous errors
    setVoteError(null);
    setIsVoting(true);
    
    try {
      // Call API first before updating UI
      const response = await saveVote(collaboration.id, voteType);
      
      // If user already voted this way, remove the vote
      if (userVote === voteType) {
        setVotes(prev => ({
          ...prev,
          [voteType === 'up' ? 'upvotes' : 'downvotes']: Math.max(0, prev[voteType === 'up' ? 'upvotes' : 'downvotes'] - 1)
        }));
        setUserVote(null);
      } 
      // If user voted the opposite way, switch the vote
      else if (userVote !== null) {
        setVotes(prev => ({
          upvotes: voteType === 'up' ? prev.upvotes + 1 : Math.max(0, prev.upvotes - 1),
          downvotes: voteType === 'down' ? prev.downvotes + 1 : Math.max(0, prev.downvotes - 1)
        }));
        setUserVote(voteType);
      } 
      // If user hasn't voted yet, add a new vote
      else {
        setVotes(prev => ({
          ...prev,
          [voteType === 'up' ? 'upvotes' : 'downvotes']: prev[voteType === 'up' ? 'upvotes' : 'downvotes'] + 1
        }));
        setUserVote(voteType);
      }
      
      // Update with server data if available
      if (response?.upvotes !== undefined && response?.downvotes !== undefined) {
        setVotes({
          upvotes: response.upvotes,
          downvotes: response.downvotes
        });
      }
    } catch (error) {
      console.error('Failed to save vote:', error);
      setVoteError('Unable to record your vote. Please try again.');
      // Don't update UI state if the API call fails
    } finally {
      setIsVoting(false);
    }
  };

  const handleProgressUpdate = async () => {
    try {
      // Show loading state
      setIsSavingProgress(true);
      setProgressError(null);
      
      // Prepare the progress data
      const progressData = {
        progressValue,
        startDate,
        endDate,
        milestones
      };
      
      // Call the service function
      await updateCollaborationProgress(collaboration.id, progressData);
      
      // Update was successful
      setIsEditingProgress(false);
      // You could display a success message here
    } catch (error) {
      console.error('Failed to update progress:', error);
      setProgressError('Failed to save progress. Please try again.');
    } finally {
      setIsSavingProgress(false);
    }
  };

  const handleAddMilestone = async () => {
    if (!newMilestone.name || !newMilestone.dueDate) return;
    
    const newMilestoneItem = {
      id: Date.now().toString(),
      ...newMilestone,
      completed: false
    };
    
    try {
      setIsSavingMilestone(true);
      setProgressError(null);
      
      // Update local state first for immediate UI response
      const updatedMilestones = [...milestones, newMilestoneItem];
      setMilestones(updatedMilestones);
      
      // Then send to backend
      await updateCollaborationProgress(collaboration.id, {
        progressValue,
        startDate,
        endDate,
        milestones: updatedMilestones
      });
      
      // Clear form and close
      setNewMilestone({ name: '', dueDate: '' });
      setIsAddingMilestone(false);
    } catch (error) {
      console.error('Failed to add milestone:', error);
      setProgressError('Failed to add milestone. Please try again.');
    } finally {
      setIsSavingMilestone(false);
    }
  };

  const handleToggleMilestone = async (id: string) => {
    try {
      setActiveMilestoneId(id);
      setProgressError(null);
      
      // Update local state first for immediate UI response
      const updatedMilestones = milestones.map(m => 
        m.id === id ? { ...m, completed: !m.completed } : m
      );
      setMilestones(updatedMilestones);
      
      // Then send to backend
      await updateCollaborationProgress(collaboration.id, {
        progressValue,
        startDate,
        endDate,
        milestones: updatedMilestones
      });
      
      // Optionally update overall progress based on milestone completion
      if (updatedMilestones.length > 0) {
        const newCompletedCount = updatedMilestones.filter(m => m.completed).length;
        const newProgressValue = Math.round((newCompletedCount / updatedMilestones.length) * 100);
        setProgressValue(newProgressValue);
      }
    } catch (error) {
      console.error('Failed to toggle milestone:', error);
      setProgressError('Failed to update milestone. Please try again.');
      
      // Revert the local state in case of error
      setMilestones(milestones);
    } finally {
      setActiveMilestoneId(null);
    }
  };

  const handleDeleteMilestone = async (id: string) => {
    try {
      setActiveMilestoneId(id);
      setProgressError(null);
      
      // Update local state first for immediate UI response
      const updatedMilestones = milestones.filter(m => m.id !== id);
      setMilestones(updatedMilestones);
      
      // Then send to backend
      await updateCollaborationProgress(collaboration.id, {
        progressValue,
        startDate,
        endDate,
        milestones: updatedMilestones
      });
      
      // Optionally update overall progress based on milestone completion
      if (updatedMilestones.length > 0) {
        const newCompletedCount = updatedMilestones.filter(m => m.completed).length;
        const newProgressValue = Math.round((newCompletedCount / updatedMilestones.length) * 100);
        setProgressValue(newProgressValue);
      }
    } catch (error) {
      console.error('Failed to delete milestone:', error);
      setProgressError('Failed to delete milestone. Please try again.');
      
      // Revert the local state in case of error
      setMilestones(milestones);
    } finally {
      setActiveMilestoneId(null);
    }
  };

  return (
    <>
      <div className="bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <button
          onClick={onBack}
          className="flex items-center text-slate-600 hover:text-slate-900 mb-6 group transition-colors duration-200"
        >
          <ArrowLeft className="h-5 w-5 mr-2 group-hover:-translate-x-1 transition-transform duration-200" />
          {cameFromSearch ? 'Back to Search Results' : 'Back to Workspace'}
        </button>

        {/* Hero Section */}
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden mb-8 border border-slate-200">
          {/* Hero Header with Gradient Background */}
          <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-blue-600 px-8 py-12 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-black/10"></div>
            <div className="absolute top-0 right-0 w-96 h-96 bg-white/5 rounded-full -translate-y-48 translate-x-48"></div>
            <div className="absolute bottom-0 left-0 w-64 h-64 bg-white/5 rounded-full translate-y-32 -translate-x-32"></div>
            
            <div className="relative z-10">
              <div className="flex justify-between items-start mb-6">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="p-3 bg-white/20 rounded-full backdrop-blur-sm">
                      <Lightbulb className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {collaboration.status && (
                        <span className={`px-4 py-2 text-sm font-medium rounded-full backdrop-blur-sm ${
                          collaboration.status === 'proposed'
                            ? 'bg-blue-500/20 text-blue-100 border border-blue-300/20'
                            : collaboration.status === 'active'
                            ? 'bg-green-500/20 text-green-100 border border-green-300/20'
                            : 'bg-gray-500/20 text-gray-100 border border-gray-300/20'
                        }`}>
                          {collaboration.status.charAt(0).toUpperCase() + collaboration.status.slice(1)}
                        </span>
                      )}
                      {collaboration.type && (
                        <span className="px-4 py-2 text-sm font-medium rounded-full bg-white/20 text-white border border-white/20 backdrop-blur-sm">
                          {collaboration.type === 'challenge' 
                            ? 'Challenge' 
                            : collaboration.type === 'idea'
                            ? 'Innovation Idea'
                            : 'Partnership'}
                        </span>
                      )}
                    </div>
                  </div>
                  <h1 className="text-4xl font-bold mb-4 leading-tight">{collaboration.title}</h1>
                  <p className="text-xl text-blue-100 mb-6 leading-relaxed max-w-4xl">{collaboration.description}</p>
                  
                  {/* Key Metrics Row */}
                  <div className="flex flex-wrap gap-6 text-white/90">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-5 w-5" />
                      <span className="text-sm">
                        Created {new Date(collaboration.createdAt).toLocaleDateString('en-US', { 
                          month: 'short', 
                          day: 'numeric', 
                          year: 'numeric' 
                        })}
                      </span>
                    </div>
                    {collaboration.ideaDetails?.category && (
                      <div className="flex items-center gap-2">
                        <Tag className="h-5 w-5" />
                        <span className="text-sm">{collaboration.ideaDetails.category}</span>
                      </div>
                    )}
                    {collaboration.ideaDetails?.stage && (
                      <div className="flex items-center gap-2">
                        <Rocket className="h-5 w-5" />
                        <span className="text-sm capitalize">{collaboration.ideaDetails.stage}</span>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Voting Section */}
                <div className="flex flex-col items-center gap-3 ml-8">
                  <div className="flex items-center gap-3 bg-white/10 rounded-full p-2 backdrop-blur-sm">
                    <button 
                      onClick={() => handleVote('up')}
                      disabled={isVoting}
                      className={`p-3 rounded-full transition-all duration-200 ${
                        userVote === 'up' 
                          ? 'bg-green-500 text-white shadow-lg scale-110' 
                          : 'bg-white/20 text-white hover:bg-white/30 hover:scale-105'
                      } ${isVoting ? 'opacity-50 cursor-not-allowed' : ''}`}
                      aria-label="Upvote"
                    >
                      <ThumbsUp className="h-5 w-5" />
                    </button>
                    <div className="text-center px-2">
                      <div className="text-2xl font-bold">{votes.upvotes}</div>
                      <div className="text-xs text-blue-200">upvotes</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <button className="p-2 rounded-full bg-white/10 text-white hover:bg-white/20 transition-colors duration-200">
                      <Heart className="h-5 w-5" />
                    </button>
                    <button className="p-2 rounded-full bg-white/10 text-white hover:bg-white/20 transition-colors duration-200">
                      <Share2 className="h-5 w-5" />
                    </button>
                  </div>
                  
                  {voteError && (
                    <span className="text-xs text-red-200 text-center max-w-24">{voteError}</span>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions Bar */}
          <div className="px-8 py-6 bg-gradient-to-r from-slate-50 to-blue-50 border-b border-slate-200">
            <div className="flex flex-wrap items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <ProtectedAction
                  onAction={() => setShowInitiativeModal(true)}
                  buttonClassName="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-6 py-3 rounded-full hover:from-indigo-700 hover:to-purple-700 flex items-center gap-2 font-medium transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                  actionName="express interest in this initiative"
                >
                  <Handshake className="h-5 w-5" />
                  Express Interest
                </ProtectedAction>
                
                {openRequests.length > 0 && (
                  <div className="flex items-center gap-2 px-4 py-2 bg-amber-100 text-amber-800 rounded-full border border-amber-200">
                    <UserPlus className="h-4 w-4" />
                    <span className="text-sm font-medium">
                      {openRequests.length} Open Position{openRequests.length > 1 ? 's' : ''}
                    </span>
                  </div>
                )}
              </div>
              
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-1 text-slate-600">
                  <Eye className="h-4 w-4" />
                  <span className="text-sm">42 views</span>
                </div>
                <div className="flex items-center gap-1 text-slate-600">
                  <Users className="h-4 w-4" />
                  <span className="text-sm">{collaboration.participants?.length || 0} participants</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Left Sidebar - Key Details */}
          <div className="lg:col-span-3 space-y-6">
                  {collaboration.type === 'challenge' && collaboration.challengeDetails && (
                    <>
                      <div className="flex items-start">
                        <Clock className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Deadline</p>
                          <p className="text-sm text-gray-500">{collaboration.challengeDetails.deadline}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <DollarSign className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Reward</p>
                          <p className="text-sm text-gray-500">{collaboration.challengeDetails.reward}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Briefcase className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Eligibility</p>
                          <p className="text-sm text-gray-500">{collaboration.challengeDetails.eligibilityCriteria}</p>
                        </div>
                      </div>
                    </>
                  )}
                  {collaboration.type === 'partnership' && collaboration.partnershipDetails && (
                    <>
                      <div className="flex items-start">
                        <Clock className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Duration</p>
                          <p className="text-sm text-gray-500">{collaboration.partnershipDetails.duration}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Briefcase className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Resources</p>
                          <p className="text-sm text-gray-500">{collaboration.partnershipDetails.resources}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Target className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Expected Outcomes</p>
                          <p className="text-sm text-gray-500">{collaboration.partnershipDetails.expectedOutcomes}</p>
                        </div>
                      </div>
                    </>
                  )}
                  {collaboration.type === 'idea' && collaboration.ideaDetails && (
                    <>
                      <div className="flex items-start">
                        <Tag className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Category</p>
                          <p className="text-sm text-gray-500">{collaboration.ideaDetails.category}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Zap className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Stage</p>
                          <p className="text-sm text-gray-500">{collaboration.ideaDetails.stage}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Users className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Target Audience</p>
                          <p className="text-sm text-gray-500">{collaboration.ideaDetails.targetAudience}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <Award className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Potential Impact</p>
                          <p className="text-sm text-gray-500">{collaboration.ideaDetails.potentialImpact}</p>
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>

              {/* Express Interest */}
              <div className="bg-gray-50 rounded-lg p-5">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Join This Initiative</h3>
                <p className="text-sm text-gray-600 mb-4">
                  Interested in contributing to this {collaboration.type || 'collaboration'}? 
                  Express your interest directly.
                </p>
                <ProtectedAction
                  onAction={() => setShowInitiativeModal(true)}
                  buttonClassName="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center"
                  actionName="express interest in this initiative"
                >
                  <Handshake className="h-4 w-4 mr-2" />
                  Express Interest
                </ProtectedAction>
              </div>

              {/* Files Section - Moved from standalone to details column */}
              <div className="bg-gray-50 rounded-lg p-5">
                <CollaborationFiles 
                  collaborationId={collaboration.id} 
                  isOwnerOrParticipant={isOwnerOrParticipant} 
                />
              </div>
            </div>

            {/* Center column - Activity (takes remaining space) */}
            <div className="flex-grow space-y-6">
              {/* Current Participants */}
              <div className="bg-gray-50 rounded-lg p-5">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <Users className="h-5 w-5 mr-2 text-indigo-600" />
                  Current Participants
                </h3>
                {collaboration.participants && collaboration.participants.length > 0 ? (
                  <div className="space-y-4">
                    {collaboration.participants.map((participant, index) => (
                      <div key={index} className="flex items-center space-x-4">
                        <div className="h-12 w-12 bg-indigo-100 rounded-full flex items-center justify-center text-indigo-700 font-semibold">
                          {typeof participant === 'string' 
                            ? participant.charAt(0).toUpperCase()
                            : (participant as any)?.name?.charAt(0).toUpperCase() || 'P'}
                        </div>
                        <div>
                          <p className="font-medium">
                            {typeof participant === 'string' 
                              ? participant 
                              : (participant as any)?.name || 'Unknown Participant'}
                          </p>
                          <p className="text-sm text-gray-500">
                            {typeof participant !== 'string' && (participant as any)?.role 
                              ? (participant as any).role 
                              : 'Partner'}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-gray-500">No participants yet</p>
                )}
              </div>

              {/* Progress */}
              {collaboration.type !== 'idea' && (
              <div className="bg-gray-50 rounded-lg p-5">
                <ComingSoonOverlay title="Progress Tracking Feature">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                    <BarChart className="h-5 w-5 mr-2 text-indigo-600" />
                    Progress Tracking
                  </h3>
                  {isAuthenticated && (collaboration.createdById === user?.id || collaboration.participants?.includes(user?.id as any)) && (
                    <button 
                      onClick={() => setIsEditingProgress(!isEditingProgress)}
                      disabled={isSavingProgress}
                      className={`text-indigo-600 hover:text-indigo-800 text-sm font-medium flex items-center ${isSavingProgress ? 'opacity-50 cursor-not-allowed' : ''}`}
                    >
                      <Edit3 className="h-4 w-4 mr-1" />
                      {isEditingProgress ? 'Cancel' : 'Edit'}
                    </button>
                  )}
                </div>
                
                {progressError && (
                  <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded-md text-sm">
                    {progressError}
                  </div>
                )}
                
                {isEditingProgress ? (
                  <div className="space-y-4 mb-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                        <input
                          id="startDate"
                          type="date"
                          value={startDate}
                          onChange={(e) => setStartDate(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                          disabled={isSavingProgress}
                        />
                      </div>
                      <div>
                        <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                        <input
                          id="endDate"
                          type="date"
                          value={endDate}
                          onChange={(e) => setEndDate(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                          disabled={isSavingProgress}
                        />
                      </div>
                    </div>
                    <div>
                      <label htmlFor="progressValue" className="block text-sm font-medium text-gray-700 mb-1">Overall Progress: {progressValue}%</label>
                      <input
                        id="progressValue"
                        type="range"
                        min="0"
                        max="100"
                        value={progressValue}
                        onChange={(e) => setProgressValue(parseInt(e.target.value))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                        disabled={isSavingProgress}
                      />
                    </div>
                    <button
                      onClick={handleProgressUpdate}
                      className={`bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center ${isSavingProgress ? 'opacity-70 cursor-not-allowed' : ''}`}
                      disabled={isSavingProgress}
                    >
                      {isSavingProgress ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Saving...
                        </>
                      ) : (
                        'Save Changes'
                      )}
                    </button>
                  </div>
                ) : (
                  <>
                    <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div className="h-full bg-indigo-600 rounded-full" style={{ width: `${progressValue}%` }} />
                    </div>
                    <div className="mt-4 grid grid-cols-3 text-sm">
                      <div>
                        <p className="text-gray-500">Start Date</p>
                        <p className="font-medium">
                          {startDate ? new Date(startDate).toLocaleDateString() : 'Not set'}
                        </p>
                      </div>
                      <div className="text-center">
                        <p className="text-gray-500">Progress</p>
                        <p className="font-medium">{progressValue}% completed</p>
                      </div>
                      <div className="text-right">
                        <p className="text-gray-500">End Date</p>
                        <p className="font-medium">
                          {endDate ? new Date(endDate).toLocaleDateString() : 'Not set'}
                        </p>
                      </div>
                    </div>
                  </>
                )}

                {/* Milestones */}
                <div className="mt-6">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="font-medium text-gray-900 flex items-center">
                      <Flag className="h-4 w-4 mr-2 text-indigo-600" />
                      Milestones ({completedMilestones}/{milestones.length})
                    </h4>
                    {isAuthenticated && (collaboration.createdById === user?.id || collaboration.participants?.includes(user?.id as any)) && (
                      <button
                        onClick={() => setIsAddingMilestone(!isAddingMilestone)}
                        disabled={isSavingMilestone}
                        className={`text-indigo-600 hover:text-indigo-800 text-sm font-medium flex items-center ${isSavingMilestone ? 'opacity-50 cursor-not-allowed' : ''}`}
                      >
                        <PlusCircle className="h-4 w-4 mr-1" />
                        {isAddingMilestone ? 'Cancel' : 'Add'}
                      </button>
                    )}
                  </div>
                </div>

                {isAddingMilestone && (
                  <div className="bg-white p-3 rounded-md shadow-sm mb-3 border border-gray-200">
                    <div className="grid grid-cols-1 gap-2">
                      <input
                        type="text"
                        placeholder="Milestone name"
                        value={newMilestone.name}
                        onChange={(e) => setNewMilestone({...newMilestone, name: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        disabled={isSavingMilestone}
                      />
                      <div className="flex gap-2">
                        <input
                          type="date"
                          value={newMilestone.dueDate}
                          onChange={(e) => setNewMilestone({...newMilestone, dueDate: e.target.value})}
                          className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                          disabled={isSavingMilestone}
                        />
                        <button
                          onClick={handleAddMilestone}
                          disabled={isSavingMilestone || !newMilestone.name || !newMilestone.dueDate}
                          className={`bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center ${(isSavingMilestone || !newMilestone.name || !newMilestone.dueDate) ? 'opacity-70 cursor-not-allowed' : ''}`}
                        >
                          {isSavingMilestone ? (
                            <>
                              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                              Adding...
                            </>
                          ) : (
                            <>
                              <PlusCircle className="h-4 w-4 mr-1" />
                              Add
                            </>
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                <div className="space-y-2">
                  {milestones.length > 0 ? (
                    milestones.map(milestone => (
                      <div 
                        key={milestone.id} 
                        className={`bg-white p-3 rounded-md shadow-sm flex items-center justify-between border ${
                          activeMilestoneId === milestone.id 
                            ? 'border-indigo-300 animate-pulse' 
                            : milestone.completed 
                              ? 'border-green-200' 
                              : 'border-gray-200'
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          <button
                            onClick={() => handleToggleMilestone(milestone.id)}
                            disabled={activeMilestoneId === milestone.id}
                            className={`mt-1 flex-shrink-0 h-5 w-5 rounded-full border flex items-center justify-center ${
                              milestone.completed 
                                ? 'bg-green-500 border-green-500 text-white' 
                                : 'border-gray-300'
                            } ${activeMilestoneId === milestone.id ? 'opacity-50 cursor-not-allowed' : ''}`}
                          >
                            {milestone.completed && <Check className="h-3 w-3" />}
                            {activeMilestoneId === milestone.id && (
                              <svg className="animate-spin h-3 w-3 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                            )}
                          </button>
                          <div>
                            <p className={`font-medium text-sm ${milestone.completed ? 'text-gray-600 line-through' : 'text-gray-900'}`}>
                              {milestone.name}
                            </p>
                            <div className="flex items-center text-xs text-gray-500 mt-1">
                              <CalendarIcon className="h-3 w-3 mr-1" />
                              {new Date(milestone.dueDate).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                        {isAuthenticated && (collaboration.createdById === user?.id || collaboration.participants?.includes(user?.id as any)) && (
                          <button
                            onClick={() => handleDeleteMilestone(milestone.id)}
                            disabled={activeMilestoneId === milestone.id}
                            className={`text-gray-400 hover:text-red-500 ${activeMilestoneId === milestone.id ? 'opacity-50 cursor-not-allowed' : ''}`}
                          >
                            {activeMilestoneId === milestone.id ? (
                              <svg className="animate-spin h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                            ) : (
                              <Trash2 className="h-4 w-4" />
                            )}
                          </button>
                        )}
                      </div>
                    ))
                  ) : (
                    <p className="text-sm text-gray-500 text-center py-3">No milestones yet</p>
                  )}
                </div>
                </ComingSoonOverlay>
              </div>
              )}

              {/* Activity Stats */}
              <ComingSoonOverlay title="Activity Stats Coming Soon">
                <div className="bg-gray-50 rounded-lg p-5">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <BarChart className="h-5 w-5 mr-2 text-indigo-600" />
                    Activity Stats Coming Soon
                  </h3>
                  <p className="text-gray-500 text-sm mb-4">This feature will be available in the next version</p>
                  <div className="grid grid-cols-3 gap-4">
                    <div className="bg-white rounded-lg p-4 shadow-sm">
                      <div className="flex items-center text-gray-500 mb-2">
                        <Target className="h-5 w-5 mr-2" />
                        <span className="text-sm">Milestones</span>
                      </div>
                      <p className="text-2xl font-semibold text-gray-900">3/5</p>
                    </div>
                    <div className="bg-white rounded-lg p-4 shadow-sm">
                      <div className="flex items-center text-gray-500 mb-2">
                        <MessageSquare className="h-5 w-5 mr-2" />
                        <span className="text-sm">Messages</span>
                      </div>
                      <p className="text-2xl font-semibold text-gray-900">24</p>
                    </div>
                    <div className="bg-white rounded-lg p-4 shadow-sm">
                      <div className="flex items-center text-gray-500 mb-2">
                        <FileText className="h-5 w-5 mr-2" />
                        <span className="text-sm">Documents</span>
                      </div>
                      <p className="text-2xl font-semibold text-gray-900">12</p>
                    </div>
                  </div>
                </div>
              </ComingSoonOverlay>

            </div>

            {/* Right column - Open Positions (fixed width) */}
            <div className="space-y-6 md:w-64 flex-shrink-0">
              {openRequests.length > 0 && (
                <div className="bg-gray-50 rounded-lg p-5">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <UserPlus className="h-5 w-5 mr-2 text-indigo-600" />
                    Open Positions
                  </h3>
                  <div className="space-y-4">
                    {openRequests.map((request, index) => (
                      <div key={index} className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-gray-900">{request.role}</h4>
                          <span className={`px-2 py-0.5 text-xs rounded-full ${
                            request.status === 'open' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                          }`}>
                            {request.status}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 mb-3">{request.description}</p>
                        <div className="flex flex-wrap gap-1 mb-3">
                          {request.expertise.map((skill, index) => (
                            <span key={index} className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">
                              {skill}
                            </span>
                          ))}
                        </div>
                        <ProtectedAction
                          onAction={() => handleExpressInterest(request)}
                          buttonClassName="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center"
                          actionName="express interest in this position"
                        >
                          <UserPlus className="h-4 w-4 mr-2" />
                          Express Interest
                        </ProtectedAction>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Related Challenge */}
              {collaboration.challengeId && (
                <div className="bg-gray-50 rounded-lg p-5">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <LinkIcon className="h-5 w-5 mr-2 text-indigo-600" />
                    Related Challenge
                  </h3>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">Challenge #{collaboration.challengeId}</p>
                      <p className="text-sm text-gray-500">View the original challenge that started this collaboration</p>
                    </div>
                    <button 
                      onClick={() => navigate(`/challenge/${collaboration.challengeId}`)}
                      className="text-indigo-600 hover:text-indigo-700 text-sm font-medium">
                      View Challenge
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

        {/* Back to Top Button */}
        <div className="fixed bottom-8 right-8 z-50">
          <button 
            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            className="p-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>
          </button>
        </div>
      </div>
    </div>

    {/* Express Interest Modal for Open Positions */}
      {selectedRequest && (
        <ExpressInterestModal
          isOpen={true}
          onClose={() => setSelectedRequest(null)}
          onSubmit={handleSubmitInterest}
          request={selectedRequest}
          modalType="position"
        />
      )}

      {/* Initiative Collaborator Modal */}
      {showInitiativeModal && (
        <ExpressInterestModal
          isOpen={true}
          onClose={() => setShowInitiativeModal(false)}
          onSubmit={handleSubmitInterest}
          modalType="initiative"
          collaboratorType={collaboratorType}
          onCollaboratorTypeChange={setCollaboratorType}
        />
      )}
    </>
  );
}